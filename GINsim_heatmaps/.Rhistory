log(3)
help(log)
x=2
x
y=3
z=x+y
z
history
x
x=3
x
x=2
x
x
y
z
x<-2
x
ls()
rm(x)
x
x=2
x
z
y
c(3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
c
v<-c(3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
v
[1]*2
[1]
v[1]
v[1]*2
v=3:12
v
a="mardi"
a
a=mardi
v[1]*2 v[2]*3 v[3]*4
v[1]*2, v[2]*3, v[3]*4
v([1],[2],[3])
v[c(1,2,3)]
v[c(1*2,2*3,3*4)]
v[c(1,2,3)]
v[c(1*(2),2*(3),3*(4))]
v[c(1,2,3)
v[c(1,2,3)]
v[c(1, 2, 3)]
w=2:11
w
v*w
notes<- c(15, 8, 14, 12, 14, 10, 18, 15, 9, 5, 12, 13, 12, 16)
notes
sort(notes)
length(notes)
min(notes)
max(notes)
range(notes)
median(notes)
quantile(notes)
mean(notes)
var(notes)
sd(notes)
summary(notes)
notes>13
sortinverse(notes)
sort(notes
sort(notes)
sort(notes)
help(sort)
sort(notes, decreasing=true)
sort(notes, decreasing=True)
sort(notes, decreasing=TRUE)
notes[>13
notes[>13]
notes>13
range(notes)
help(quantile)
quantile(notes)
notes>=13
notes[notes>=13]
baby<-read.table(file="http://www.unice.fr/mbailly/docs/TP/baby.txt",header=TRUE)
names(baby)
dim(baby)
head(baby)
data.frame
baby
name(baby)
names(baby)
dim(baby)
head(baby)
help(names)
help(date.frame)
help(data.frame)
check.names
check.names(baby)
check.names(age)
view(baby)
View(baby)
names(baby)
dim(baby)
head(baby)
help(head)
head(age)
head(baby.age)
head(baby,n = 10L)
head(stats:ftable(Age))
head(stats:ftable( Age))
help(names)
baby[ ,"age"]
baby[ 4, ]
head(baby,n=15)
baby[ 4, "weight"]
baby[ 4, 37, "age" , "weight"]
baby[ 4, 37, "age"]
baby[ (4, 37), ("age" ,"weight")]
baby[(4, 37), ("age" ,"weight")]
baby[(4,37), ("age" ,"weight")]
baby[4$37, "age"$"weight"]
baby[ 4$37, "age"$"weight"]
baby[ (4$37), "age"$"weight"]
baby[ c(4, 37), c("age", "weight")]
baby[ c(parity=TRUE), "weight")
baby[ c(parity=TRUE), "weight"]
baby[ c("parity"=TRUE), "weight"]
baby[ "parity"=TRUE, "weight"]
baby[ , "weight"]
baby[ "weight", "parity"]
baby$age
baby[ ,"parity"=TRUE
baby[ ,"parity"=TRUE]
baby[ ,"parity"=TRUE]
baby["weight" ,baby("parity"=TRUE)]
baby[ "weight" ,baby("parity"=TRUE)]
baby[ "weight" ,c(baby("parity"=TRUE))]
baby[ "weight" ,baby("parity"=TRUE)]
baby[ "bwt" ,baby("parity"=TRUE)]
baby[ "bwt" ,baby("parity"$TRUE)]
baby[ baby("parity"$TRUE), "btw"]
baby[ baby"parity"$TRUE, "btw"]
baby[ "parity"$TRUE, "btw"]
baby[ baby("parity"$TRUE), "btw"]
baby[ baby$parity=TRUE, "btw"]
baby[ baby$parity==TRUE, "btw"]
baby[baby$parity==TRUE, "btw"]
baby[baby$parity==TRUE, "btw"]
baby[baby$parity==TRUE, "btw"]
baby
baby[baby$parity==TRUE, "btw"]
baby[baby$parity==TRUE,]
baby$parity==TRUE
baby$parity == TRUE
baby$parity
baby$parity == TRUE
baby
baby$parity
baby$parity[1:4]
baby$parity[1:4] == T
baby$parity
baby$gestation
baby$gestation > 287
baby[baby$gestation > 287,]
baby[baby$parity,]
baby[baby$parity == T,]
baby[baby$parity == T, "bwt"]
mean(baby[baby$parity == T, "bwt"])
hist(x=baby$bwt)
help(hist)
hist(baby, freq=NULL, probability= !freq, include.lowest= T, right= T)
hist(x=baby$bwt, include.lowest = T
hist(x=baby$bwt, include.lowest = T=
hist(x=baby$bwt, include.lowest = T)
hist(x=baby$bwt, include.lowest = T)
hist(x=baby$bwt, freq = T)
hist(x=baby$bwt, freq = F)
hist(x=baby$bwt, freq = F)
hist(x=baby$bwt, freq = T)
hist(x=baby$bwt, freq = T, col = "darkpink")
hist(x=baby$bwt, freq = T, col = "darkpink", border = T)
hist(x=baby$bwt, freq = T, col = "darkpink", border = T)
hist(x=baby$bwt, freq = T, col = "black", border = T)
hist(x=baby$bwt, freq = T, col = "darkpink667", border = T)
hist(x=baby$bwt, freq = T, col = "darkpink668", border = T)
hist(x=baby$bwt, freq = T, col = "yellow", border = T)
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main= "Répartition des poids des bébés à la naissance", xlab = "comptage" , ylim = "Gros[Kgs]")
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main= "Répartition des poids des bébés à la naissance", xlab= "comptage" , ylim ="Gros[Kgs]")
hist(x=baby$bwt, freq = T, col = "yellow", border = T, plot(main= "Répartition des poids des bébés à la naissance", xlab= "comptage" , ylim ="Gros[Kgs]"))
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main= paste("Répartition des poids des bébés à la naissance"), xlab= "comptage" , ylim ="Gros[Kgs]"))
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main= paste("Répartition des poids des bébés à la naissance"), xlab= "comptage" , ylim ="Gros[Kgs]")
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main= paste("Répartition des poids des bébés à la naissance")
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main=paste("Répartition des poids des bébés à la naissance")
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main="Répartition des poids des bébés à la naissance")
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main="Répartition des poids des bébés à la naissance", xlab="Comptage"
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main="Répartition des poids des bébés à la naissance", xlab="Comptage")
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main="Répartition des poids des bébés à la naissance", xlab="Comptage")
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main="Répartition des poids des bébés à la naissance", xlab="Lepois en Kilogros",ylab="Comptages")
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main="Répartition des poids des bébés à la naissance", xlab="Poids[KG]",ylab="Comptages")
hist(x=baby$bwt, freq = T, col = "yellow", border = T, main="Répartition des poids des bébés à la naissance", xlab="Poids[Kgs]",ylab="Comptages")
hist(x=baby$bwt, freq = T, col = "yellow", border = "pink", main="Répartition des poids des bébés à la naissance", xlab="Poids[Kgs]",ylab="Comptages")
hist(x=baby$bwt, freq = T, col = "yellow", border = "darkpink", main="Répartition des poids des bébés à la naissance", xlab="Poids[Kgs]",ylab="Comptages")
hist(x=baby$bwt, freq = T, col = "yellow", border = "darkred", main="Répartition des poids des bébés à la naissance", xlab="Poids[Kgs]",ylab="Comptages")
hist(x=baby$bwt, freq = T, col = "yellow", border = "pink", main="Répartition des poids des bébés à la naissance", xlab="Poids[Kgs]",ylab="Comptages")
help(col)
hist(x=baby$weight, freq = T, col = "yellow", border = "pink", main="Répartition des poids des bébés à la naissance", xlab="Poids[Kgs]",ylab="Comptages")
hist(x=baby$bwt, freq = T, col = "yellow", border = "pink", main="Répartition des poids des bébés à la naissance", xlab="Poids[Kgs]",ylab="Comptages")
hist(x=baby$bwt, freq = T, col = "chroma", border = "pink", main="Répartition des poids des bébés à la naissance", xlab="Poids[Kgs]",ylab="Comptages")
hist(x=baby$bwt, freq = T, col = "darkyellow", border = "pink", main="Répartition des poids des bébés à la naissance", xlab="Poids[Kgs]",ylab="Comptages")
hist(x=baby$bwt, freq = T, col = "yellow", border = "pink", main="Répartition des poids des bébés à la naissance", xlab="Poids[Kgs]",ylab="Comptages")
table(baby$smoke)
comptes_fumeurs<-table(baby$smoke)
barplot(comptes_fumeurs)
barplot(baby$weight)
barplot(weight$gestation)
barplot(weight$height)
barplot(baby$height)
barplot(baby$parity)
barplot(baby$smoke)
comptes_forumeurs<-table(baby$parity)
barplot(comptes_forumeurs)
comptes_forumeurs<-table(baby$smoke)
comptes_forumeurs<-table(baby$btw)
barplot(comptes_forumeurs)
savehistory("TD1.Rhistory")
savehistory("TD1.Rhistory")
history()
history(100)
savehistory("TD1")
history(500)
baby00 <- baby[baby$age > 25,]
p<-ggplot(data=as.data.frame(baby), aes(x=Condition, y=Proba_cumulee, fill=Proba_cumulee)) +
geom_bar(stat="identity") + geom_text(aes(label=Proba_cumulee), vjust=1.6, color="white", size=2) + theme_minimal()
library(reshape)
library(ggplot2)
p<-ggplot(data=as.data.frame(baby), aes(x=Condition, y=Proba_cumulee, fill=Proba_cumulee)) +
geom_bar(stat="identity") + geom_text(aes(label=Proba_cumulee), vjust=1.6, color="white", size=2) + theme_minimal()
p
p<-ggplot(data=as.data.frame(baby00), aes(x=Condition, y=Proba_cumulee, fill=Proba_cumulee)) +
geom_bar(stat="identity") + geom_text(aes(label=Proba_cumulee), vjust=1.6, color="white", size=2) + theme_minimal()
baby0 <- melt(baby00, id.vars = "age")
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, fill="height")) +
geom_bar(stat="identity") + geom_text(aes(label="height"), vjust=1.6, color="white", size=2) + theme_minimal()
p
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, fill="weight")) +
geom_bar(stat="identity") + geom_text(aes(label="height"), vjust=1.6, color="white", size=2) + theme_minimal()
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, fill=weight)) +
geom_bar(stat="identity") + geom_text(aes(label="height"), vjust=1.6, color="white", size=2) + theme_minimal()
p
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, fill=height)) +
geom_bar(stat="identity") + geom_text(aes(label="height"), vjust=1.6, color="white", size=2) + theme_minimal()
p
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value)) +
geom_bar(stat="identity") + geom_text(aes(label="height"), vjust=1.6, color="white", size=2) + theme_minimal()
p
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, group=variable, shape= variable,colour=variable))) +
geom_bar(stat="identity") + geom_text(aes(label="height"), vjust=1.6, color="white", size=2) + theme_minimal()
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, group=variable, shape= variable,colour=variable)))
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, group=variable, shape= variable,colour=variable))
p
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, group=variable, shape= variable,colour=variable))) +
geom_bar(stat="identity") + geom_text(aes(label="height")
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, group=variable, shape= variable,colour=variable)) +
geom_bar(stat="identity") + geom_text(aes(label="height")
p
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, group=variable, shape= variable,colour=variable)) +
geom_bar(stat="identity") + geom_text(aes(label="height"))
p
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, group=variable, shape= variable,colour=variable)) +
geom_bar(stat="identity")
p
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, group=variable, shape= variable,colour=variable))
p
+
geom_bar(stat="identity")
p<-ggplot(data=as.data.frame(baby0), aes(x=age, y=value, group=variable, shape= variable,colour=variable)) +
geom_bar(stat="identity")
p
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
package(c('data.table','ggplot2','tidyr','reshape','parallel','Matrix', 'gridExtra'))
required.packages <- c('data.table','ggplot2','tidyr','reshape','parallel','Matrix', 'gridExtra')
ipkgs(required.packages)
ipkgs <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
required.packages <- c('data.table','ggplot2','tidyr','reshape','parallel','Matrix', 'gridExtra')
ipkgs(required.packages)
help(t.test)
library("bookdown", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
knit_with_parameters('~/PhD Thesis phase 1/Index.rmd')
base <- "~/Bureau/Prototype data analysis/Tools/Scripts/GINsim_heatmaps/"
setwd(base)
ipkgs <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
required.packages <- c('here','data.table','ggplot2','tidyr','reshape','parallel','Matrix', 'gridExtra','reshape2','RColorBrewer','ggpubr','cowplot','grid','argparse','argparser')
ipkgs(required.packages)
source("IsolatorHelper.R")
NAMES <- c("Fe_ext","O2","Fe_free","Fur","RyhB","ROS","OxyR","Hpx","Suf","IscR-A","IscR-H","IscSUA","ErpA","NfuA")
INPUTS <- c("Fe_ext","O2")
BOOLEAN <- c("ROS","Hpx","ErpA","NfuA","IscSUA","IscR-A","IscR-H","OxyR")
MULTIVALUED <- c("Fe_ext","O2","Fe_free","Fur","RyhB","Suf")
OUTPUTS <- c("Fe_free","ROS","IscSUA","ErpA") #For the Labeller function
THEOUTPUTS <- c("Fe_free","ROS","IscSUA","Suf", "ErpA") #For the plotting part
IS.OUTPUTS <- c("IscSUA","Suf")
VALUESFUR <- c(1,2)
VALUESMULTI <- c(0,1,2)
VALUESBOOL <- c(0,1)
COLORSCALE_MULTI <- c("#ffffff","#c8afff", "#cc00ff")
COLORSCALE_BOOL <- c("#ffffff","#cc00ff")
DARK_COLORSCALES <- list(COLORSCALE_BOOL,COLORSCALE_MULTI)
Folderz <- list.dirs()
Folders <- Folderz[2:length(Folderz)]
allmutNames <- getAllMutants(Folders)
ALLMUT <- lapply(Folders, reader)
ALLMUT <- G_Formatter(ALLMUT,NAMES)
No_Isc_no_Suf <- lapply(ALLMUT, MultiDetection.No.IS ,out1 = "IscSUA", out2 = "Suf")
IS <- mapply(function(partMutNames,is_mutant){return(partMutNames[which(is_mutant == T)])}, partMutNames = allmutNames, is_mutant = No_Isc_no_Suf)
ALL.IS.MUT <- mapply(reader2, chem1 = Folders, MutIS =  IS)
ALL.IS.MUT <- G_Formatter(ALL.IS.MUT,NAMES)
DarkUltimateIsolatorPlotter <- function(list2simulations, MutantISList)
{
AllPlots4mutants <- lapply(list2simulations, DarkIsolatorPlotter, inp = INPUTS, o = OUTPUTS, t = THEOUTPUTS, v = VALUESMULTI)
names(AllPlots4mutants) <- MutantISList
return(AllPlots4mutants)
}
DarkUltimateIsolatorPlotter_IS <- function(list2simulations, MutantISList)
{
AllPlots4mutants <- lapply(list2simulations, DarkIsolatorPlotter, inp = INPUTS, o = OUTPUTS, t = IS.OUTPUTS, v = VALUESMULTI)
names(AllPlots4mutants) <- MutantISList
return(AllPlots4mutants)
}
DarkMegaIsolatorPlotter <- function(allSimulations,allMutantList)
{
Omega <- mapply(DarkUltimateIsolatorPlotter, list2simulations = allSimulations, MutantISList = allMutantList)
return(Omega)
}
DarkMegaIsolatorPlotter_IS <- function(allSimulations,allMutantList)
{
Omega <- mcmapply(DarkUltimateIsolatorPlotter_IS, list2simulations = allSimulations, MutantISList = allMutantList, mc.cores = 3)
return(Omega)
}
Omegamon <- DarkMegaIsolatorPlotter_IS(ALL.IS.MUT,IS)
Omegamon.merciful <- DarkMegaIsolatorPlotter(ALLMUT,allmutNames)
ULTIMATE_PRINTER <- function(WholePlotList,WholeMutantList,folderlist)
{
noms <- gsub("\\./", "", folderlist)
#print(noms)
N_A_M_E_S <- paste(noms,"_Readouts.pdf",sep = "")
mapply(ThePlotPrinter, Megalist2plots = WholePlotList, list2mutants =WholeMutantList, plotname = N_A_M_E_S)
}
ULTIMATE_PRINTER_IS <- function(WholePlotList,WholeMutantList,folderlist)
{
noms <- gsub("\\./", "", folderlist)
#print(noms)
N_A_M_E_S <- paste(noms,"_IS_mutants.pdf",sep = "")
mapply(ThePlotPrinter, Megalist2plots = WholePlotList, list2mutants =WholeMutantList, plotname = N_A_M_E_S)
}
ULTIMATE_PRINTER_IS(Omegamon,IS,Folders)
ULTIMATE_PRINTER(Omegamon.merciful,allmutNames,Folders)
